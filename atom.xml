<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fzzf</title>
  <subtitle>风中追风</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fzzf.github.io/"/>
  <updated>2016-11-22T01:56:30.144Z</updated>
  <id>http://fzzf.github.io/</id>
  
  <author>
    <name>Fzzf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title> 分布式系统事务一致性解决方案</title>
    <link href="http://fzzf.github.io/2016/11/22/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%BA%8B%E5%8A%A1%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://fzzf.github.io/2016/11/22/分布式系统事务一致性解决方案/</id>
    <published>2016-11-22T01:53:00.000Z</published>
    <updated>2016-11-22T01:56:30.144Z</updated>
    
    <content type="html">&lt;p&gt;转载自：&lt;a href=&quot;http://www.infoq.com/cn/articles/solution-of-distributed-system-transaction-consistency&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;分布式系统事务一致性解决方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开篇&lt;/p&gt;
&lt;p&gt;在OLTP系统领域，我们在很多业务场景下都会面临事务一致性方面的需求，例如最经典的Bob给Smith转账的案例。传统的企业开发，系统往往是以单体应用形式存在的，也没有横跨多个数据库。我们通常只需借助开发平台中特有数据访问技术和框架（例如Spring、JDBC、ADO.NET），结合关系型数据库自带的事务管理机制来实现事务性的需求。关系型数据库通常具有ACID特性：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。&lt;/p&gt;
&lt;p&gt;而大型互联网平台往往是由一系列分布式系统构成的，开发语言平台和技术栈也相对比较杂，尤其是在SOA和微服务架构盛行的今天，一个看起来简单的功能，内部可能需要调用多个“服务”并操作多个数据库或分片来实现，情况往往会复杂很多。单一的技术手段和解决方案，已经无法应对和满足这些复杂的场景了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;分布式系统的特性&lt;/p&gt;
&lt;p&gt;对分布式系统有过研究的读者，可能听说过“CAP定律”、“Base理论”等，非常巧的是，化学理论中ACID是酸、Base恰好是碱。这里笔者不对这些概念做过多的解释，有兴趣的读者可以查看相关参考资料。CAP定律如下图：&lt;br&gt;&lt;img src=&quot;http://cdn1.infoqstatic.com/statics_s2_20161025-0357u1/resource/articles/solution-of-distributed-system-transaction-consistency/zh/resources/000.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在分布式系统中，同时满足“CAP定律”中的“一致性”、“可用性”和“分区容错性”三者是不可能的，这比现实中找对象需同时满足“高、富、帅”或“白、富、美”更加困难。在互联网领域的绝大多数的场景，都需要牺牲强一致性来换取系统的高可用性，系统往往只需要保证“最终一致性”，只要这个最终时间是在用户可以接受的范围内即可。&lt;/p&gt;
&lt;p&gt;分布式事务&lt;/p&gt;
&lt;p&gt;提到分布式系统，必然要提到分布式事务。要想理解分布式事务，不得不先介绍一下两阶段提交协议。先举个简单但不精准的例子来说明：&lt;/p&gt;
&lt;p&gt;第一阶段，张老师作为“协调者”，给小强和小明（参与者、节点）发微信，组织他们俩明天8点在学校门口集合，一起去爬山，然后开始等待小强和小明答复。&lt;/p&gt;
&lt;p&gt;第二阶段，如果小强和小明都回答没问题，那么大家如约而至。如果小强或者小明其中一人回答说“明天没空，不行”，那么张老师会立即通知小强和小明“爬山活动取消”。&lt;/p&gt;
&lt;p&gt;细心的读者会发现，这个过程中可能有很多问题的。如果小强没看手机，那么张老师会一直等着答复，小明可能在家里把爬山装备都准备好了却一直等着张老师确认信息。更严重的是，如果到明天8点小强还没有答复，那么就算“超时”了，那小明到底去还是不去集合爬山呢？&lt;/p&gt;
&lt;p&gt;这就是两阶段提交协议的弊病，所以后来业界又引入了三阶段提交协议来解决该类问题。&lt;/p&gt;
&lt;p&gt;两阶段提交协议在主流开发语言平台，数据库产品中都有广泛应用和实现的，下面来介绍一下XOpen组织提供的DTP模型图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn1.infoqstatic.com/statics_s2_20161025-0357u1/resource/articles/solution-of-distributed-system-transaction-consistency/zh/resources/001.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;为中小微企业提供一站式金融服务解决方案！&lt;/p&gt;
&lt;p&gt;XA协议指的是TM（事务管理器）和RM（资源管理器）之间的接口。目前主流的关系型数据库产品都是实现了XA接口的。JTA(Java Transaction API)是符合X/Open DTP模型的，事务管理器和资源管理器之间也使用了XA协议。 本质上也是借助两阶段提交协议来实现分布式事务的，下面分别来看看XA事务成功和失败的模型图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn1.infoqstatic.com/statics_s2_20161025-0357u1/resource/articles/solution-of-distributed-system-transaction-consistency/zh/resources/002.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在JavaEE平台下，WebLogic、Webshare等主流商用的应用服务器提供了JTA的实现和支持。而在Tomcat下是没有实现的（其实笔者并不认为Tomcat能算是JavaEE应用服务器），这就需要借助第三方的框架Jotm、Automikos等来实现，两者均支持spring事务整合。&lt;/p&gt;
&lt;p&gt;而在Windows .NET平台中，则可以借助ado.net中的TransactionScop API来编程实现，还必须配置和借助Windows操作系统中的MSDTC服务。如果你的数据库使用的mysql，并且mysql是部署在Linux平台上的，那么是无法支持分布式事务的。 由于篇幅关系，这里不展开，感兴趣的读者可以自行查阅相关资料并实践。&lt;/p&gt;
&lt;p&gt;总结：这种方式实现难度不算太高，比较适合传统的单体应用，在同一个方法中存在跨库操作的情况。但分布式事务对性能的影响会比较大，不适合高并发和高性能要求的场景。&lt;/p&gt;
&lt;p&gt;提供回滚接口&lt;/p&gt;
&lt;p&gt;在服务化架构中，功能X，需要去协调后端的A、B甚至更多的原子服务。那么问题来了，假如A和B其中一个调用失败了，那可怎么办呢？&lt;/p&gt;
&lt;p&gt;在笔者的工作中经常遇到这类问题，往往提供了一个BFF层来协调调用A、B服务。如果有些是需要同步返回结果的，我会尽量按照“串行”的方式去调用。如果调用A失败，则不会盲目去调用B。如果调用A成功，而调用B失败，会尝试去回滚刚刚对A的调用操作。&lt;/p&gt;
&lt;p&gt;当然，有些时候我们不必严格提供单独对应的回滚接口，可以通过传递参数巧妙的实现。&lt;/p&gt;
&lt;p&gt;这样的情况，我们会尽量把可提供回滚接口的服务放在前面。举个例子说明：&lt;/p&gt;
&lt;p&gt;我们的某个论坛网站，每天登录成功后会奖励用户5个积分，但是积分和用户又是两套独立的子系统服务，对应不同的DB，这控制起来就比较麻烦了。解决思路：&lt;/p&gt;
&lt;p&gt;把登录和加积分的服务调用放在BFF层一个本地方法中。&lt;br&gt;当用户请求登录接口时，先执行加积分操作，加分成功后再执行登录操作&lt;br&gt;如果登录成功，那当然最好了，积分也加成功了。如果登录失败，则调用加积分对应的回滚接口（执行减积分的操作）。&lt;br&gt;总结：这种方式缺点比较多，通常在复杂场景下是不推荐使用的，除非是非常简单的场景，非常容易提供回滚，而且依赖的服务也非常少的情况。&lt;/p&gt;
&lt;p&gt;这种实现方式会造成代码量庞大，耦合性高。而且非常有局限性，因为有很多的业务是无法很简单的实现回滚的，如果串行的服务很多，回滚的成本实在太高。&lt;/p&gt;
&lt;p&gt;本地消息表&lt;/p&gt;
&lt;p&gt;这种实现方式的思路，其实是源于ebay，后来通过支付宝等公司的布道，在业内广泛使用。其基本的设计思想是将远程分布式事务拆分成一系列的本地事务。如果不考虑性能及设计优雅，借助关系型数据库中的表即可实现。&lt;/p&gt;
&lt;p&gt;举个经典的跨行转账的例子来描述。&lt;/p&gt;
&lt;p&gt;第一步伪代码如下，扣款1W，通过本地事务保证了凭证消息插入到消息表中。&lt;br&gt;&lt;img src=&quot;http://cdn1.infoqstatic.com/statics_s2_20161025-0357u1/resource/articles/solution-of-distributed-system-transaction-consistency/zh/resources/004.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;第二步，通知对方银行账户上加1W了。那问题来了，如何通知到对方呢？&lt;/p&gt;
&lt;p&gt;通常采用两种方式：&lt;/p&gt;
&lt;p&gt;采用时效性高的MQ，由对方订阅消息并监听，有消息时自动触发事件&lt;br&gt;采用定时轮询扫描的方式，去检查消息表的数据。&lt;br&gt;两种方式其实各有利弊，仅仅依靠MQ，可能会出现通知失败的问题。而过于频繁的定时轮询，效率也不是最佳的（90%是无用功）。所以，我们一般会把两种方式结合起来使用。&lt;/p&gt;
&lt;p&gt;解决了通知的问题，又有新的问题了。万一这消息有重复被消费，往用户帐号上多加了钱，那岂不是后果很严重？&lt;/p&gt;
&lt;p&gt;仔细思考，其实我们可以消息消费方，也通过一个“消费状态表”来记录消费状态。在执行“加款”操作之前，检测下该消息（提供标识）是否已经消费过，消费完成后，通过本地事务控制来更新这个“消费状态表”。这样子就避免重复消费的问题。&lt;/p&gt;
&lt;p&gt;总结：上诉的方式是一种非常经典的实现，基本避免了分布式事务，实现了“最终一致性”。但是，关系型数据库的吞吐量和性能方面存在瓶颈，频繁的读写消息会给数据库造成压力。所以，在真正的高并发场景下，该方案也会有瓶颈和限制的。&lt;/p&gt;
&lt;p&gt;MQ（非事务消息）&lt;/p&gt;
&lt;p&gt;通常情况下，在使用非事务消息支持的MQ产品时，我们很难将业务操作与对MQ的操作放在一个本地事务域中管理。通俗点描述，还是以上述提到的“跨行转账”为例，我们很难保证在扣款完成之后对MQ投递消息的操作就一定能成功。这样一致性似乎很难保证。&lt;/p&gt;
&lt;p&gt;先从消息生产者这端来分析，请看伪代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn1.infoqstatic.com/statics_s2_20161025-0357u1/resource/articles/solution-of-distributed-system-transaction-consistency/zh/resources/005.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;根据上述代码及注释，我们来分析下可能的情况：&lt;/p&gt;
&lt;p&gt;操作数据库成功，向MQ中投递消息也成功，皆大欢喜&lt;br&gt;操作数据库失败，不会向MQ中投递消息了&lt;br&gt;操作数据库成功，但是向MQ中投递消息时失败，向外抛出了异常，刚刚执行的更新数据库的操作将被回滚&lt;br&gt;从上面分析的几种情况来看，貌似问题都不大的。那么我们来分析下消费者端面临的问题：&lt;/p&gt;
&lt;p&gt;消息出列后，消费者对应的业务操作要执行成功。如果业务执行失败，消息不能失效或者丢失。需要保证消息与业务操作一致&lt;br&gt;尽量避免消息重复消费。如果重复消费，也不能因此影响业务结果&lt;br&gt;如何保证消息与业务操作一致，不丢失？&lt;/p&gt;
&lt;p&gt;主流的MQ产品都具有持久化消息的功能。如果消费者宕机或者消费失败，都可以执行重试机制的（有些MQ可以自定义重试次数）。&lt;/p&gt;
&lt;p&gt;如何避免消息被重复消费造成的问题？&lt;/p&gt;
&lt;p&gt;保证消费者调用业务的服务接口的幂等性&lt;br&gt;通过消费日志或者类似状态表来记录消费状态，便于判断（建议在业务上自行实现，而不依赖MQ产品提供该特性）&lt;/p&gt;
&lt;p&gt;总结：这种方式比较常见，性能和吞吐量是优于使用关系型数据库消息表的方案。如果MQ自身和业务都具有高可用性，理论上是可以满足大部分的业务场景的。不过在没有充分测试的情况下，不建议在交易业务中直接使用。&lt;/p&gt;
&lt;p&gt;MQ（事务消息）&lt;/p&gt;
&lt;p&gt;举个例子，Bob向Smith转账，那我们到底是先发送消息，还是先执行扣款操作？&lt;/p&gt;
&lt;p&gt;好像都可能会出问题。如果先发消息，扣款操作失败，那么Smith的账户里面会多出一笔钱。反过来，如果先执行扣款操作，后发送消息，那有可能扣款成功了但是消息没发出去，Smith收不到钱。除了上面介绍的通过异常捕获和回滚的方式外，还有没有其他的思路呢？&lt;/p&gt;
&lt;p&gt;下面以阿里巴巴的RocketMQ中间件为例，分析下其设计和实现思路。&lt;/p&gt;
&lt;p&gt;RocketMQ第一阶段发送Prepared消息时，会拿到消息的地址，第二阶段执行本地事物，第三阶段通过第一阶段拿到的地址去访问消息，并修改状态。细心的读者可能又发现问题了，如果确认消息发送失败了怎么办？RocketMQ会定期扫描消息集群中的事物消息，这时候发现了Prepared消息，它会向消息发送者确认，Bob的钱到底是减了还是没减呢？如果减了是回滚还是继续发送确认消息呢？RocketMQ会根据发送端设置的策略来决定是回滚还是继续发送确认消息。这样就保证了消息发送与本地事务同时成功或同时失败。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://cdn1.infoqstatic.com/statics_s2_20161025-0357u1/resource/articles/solution-of-distributed-system-transaction-consistency/zh/resources/006.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;总结：据笔者的了解，各大知名的电商平台和互联网公司，几乎都是采用类似的设计思路来实现“最终一致性”的。这种方式适合的业务场景广泛，而且比较可靠。不过这种方式技术实现的难度比较大。目前主流的开源MQ（ActiveMQ、RabbitMQ、Kafka）均未实现对事务消息的支持，所以需二次开发或者新造轮子。比较遗憾的是，RocketMQ事务消息部分的代码也并未开源，需要自己去实现。&lt;/p&gt;
&lt;p&gt;其他补偿方式&lt;/p&gt;
&lt;p&gt;做过支付宝交易接口的同学都知道，我们一般会在支付宝的回调页面和接口里，解密参数，然后调用系统中更新交易状态相关的服务，将订单更新为付款成功。同时，只有当我们回调页面中输出了success字样或者标识业务处理成功相应状态码时，支付宝才会停止回调请求。否则，支付宝会每间隔一段时间后，再向客户方发起回调请求，直到输出成功标识为止。&lt;/p&gt;
&lt;p&gt;其实这就是一个很典型的补偿例子，跟一些MQ重试补偿机制很类似。&lt;/p&gt;
&lt;p&gt;一般成熟的系统中，对于级别较高的服务和接口，整体的可用性通常都会很高。如果有些业务由于瞬时的网络故障或调用超时等问题，那么这种重试机制其实是非常有效的。&lt;/p&gt;
&lt;p&gt;当然，考虑个比较极端的场景，假如系统自身有bug或者程序逻辑有问题，那么重试1W次那也是无济于事的。那岂不是就发生了“明明已经付款，却显示未付款不发货”类似的悲剧？&lt;/p&gt;
&lt;p&gt;其实为了交易系统更可靠，我们一般会在类似交易这种高级别的服务代码中，加入详细日志记录的，一旦系统内部引发类似致命异常，会有邮件通知。同时，后台会有定时任务扫描和分析此类日志，检查出这种特殊的情况，会尝试通过程序来补偿并邮件通知相关人员。&lt;/p&gt;
&lt;p&gt;在某些特殊的情况下，还会有“人工补偿”的，这也是最后一道屏障。&lt;/p&gt;
&lt;p&gt;小结&lt;/p&gt;
&lt;p&gt;上诉的几种方案中，笔者也大致总结了其设计思路，优势，劣势等，相信读者已经有了一定的理解。其实分布式系统的事务一致性本身是一个技术难题，目前没有一种很简单很完美的方案能够应对所有场景。具体还是要使用者根据不同的业务场景去抉择。&lt;/p&gt;
&lt;p&gt;关于作者&lt;/p&gt;
&lt;p&gt;丁浪，现就职于某垂直电商平台，担任技术架构师。关注高并发、高可用的架构设计，对系统服务化、分库分表、性能调优等方面有深入研究和丰富实践经验。热衷于技术研究和分享。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&#39;http://www.infoq.com/cn/articles/solution-of-distributed-system-transaction-consistency&#39;&gt;分布式系统事务一致性解决方案&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开篇&lt;/p&gt;
&lt;p&gt;在OLTP系统领域，我们在很多业务场景下都会面临事务一致性方面的需求，例如最经典的Bob给Smith转账的案例。传统的企业开发，系统往往是以单体应用形式存在的，也没有横跨多个数据库。我们通常只需借助开发平台中特有数据访问技术和框架（例如Spring、JDBC、ADO.NET），结合关系型数据库自带的事务管理机制来实现事务性的需求。关系型数据库通常具有ACID特性：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。&lt;/p&gt;
&lt;p&gt;而大型互联网平台往往是由一系列分布式系统构成的，开发语言平台和技术栈也相对比较杂，尤其是在SOA和微服务架构盛行的今天，一个看起来简单的功能，内部可能需要调用多个“服务”并操作多个数据库或分片来实现，情况往往会复杂很多。单一的技术手段和解决方案，已经无法应对和满足这些复杂的场景了。&lt;br&gt;
    
    </summary>
    
      <category term="分布式" scheme="http://fzzf.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式" scheme="http://fzzf.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot支持JDK1.6</title>
    <link href="http://fzzf.github.io/2016/11/22/SpringBoot%E6%94%AF%E6%8C%81JDK1-6/"/>
    <id>http://fzzf.github.io/2016/11/22/SpringBoot支持JDK1-6/</id>
    <published>2016-11-22T01:50:00.000Z</published>
    <updated>2016-11-22T01:52:44.992Z</updated>
    
    <content type="html">&lt;p&gt;最近需要开发一些接口，就采用了之前一直关注的Spring Boot。但是我本地JDK为1.8编译没有问题，但是服务器上面还是用的JDK1.6。导致编译出错。&lt;br&gt;于是就查看了Spring Boot官网，找到了解决办法&lt;a href=&quot;http://docs.spring.io/spring-boot/docs/1.3.8.RELEASE/reference/htmlsingle/#howto-use-java-6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;How to use Java 6&lt;/a&gt;.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;需要在spring-boot-starter-data-jpa依赖里面添加&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;exclusion&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;groupId&amp;gt;javax.transaction&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;artifactId&amp;gt;javax.transaction-api&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;lt;/exclusion&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后再添加依赖&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;lt;groupId&amp;gt;org.jboss.spec.javax.transaction&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;lt;artifactId&amp;gt;jboss-transaction-api_1.2_spec&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &amp;lt;version&amp;gt;1.0.0.Final&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;重新编译，大功告成。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要开发一些接口，就采用了之前一直关注的Spring Boot。但是我本地JDK为1.8编译没有问题，但是服务器上面还是用的JDK1.6。导致编译出错。&lt;br&gt;于是就查看了Spring Boot官网，找到了解决办法&lt;a href=&#39;http://docs.spring.io/spring-boot/docs/1.3.8.RELEASE/reference/htmlsingle/#howto-use-java-6&#39;&gt;How to use Java 6&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="spring boot" scheme="http://fzzf.github.io/categories/spring-boot/"/>
    
    
      <category term="spring boot" scheme="http://fzzf.github.io/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用</title>
    <link href="http://fzzf.github.io/2016/05/26/hexo%E4%BD%BF%E7%94%A8/"/>
    <id>http://fzzf.github.io/2016/05/26/hexo使用/</id>
    <published>2016-05-26T12:00:00.000Z</published>
    <updated>2016-05-27T03:41:24.000Z</updated>
    
    <content type="html">&lt;p&gt;hexo博客搭建需要准备nodejs,以及git&lt;/p&gt;
&lt;h6 id=&quot;首先在github上创建一个-xxx-github-io的respsitory&quot;&gt;&lt;a href=&quot;#首先在github上创建一个-xxx-github-io的respsitory&quot; class=&quot;headerlink&quot; title=&quot;首先在github上创建一个 xxx.github.io的respsitory&quot;&gt;&lt;/a&gt;首先在github上创建一个 xxx.github.io的respsitory&lt;/h6&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; 
&lt;h6 id=&quot;安装hexo&quot;&gt;&lt;a href=&quot;#安装hexo&quot; class=&quot;headerlink&quot; title=&quot;安装hexo&quot;&gt;&lt;/a&gt;安装hexo&lt;/h6&gt;&lt;pre&gt;
npm install hexo-cli -g
&lt;/pre&gt;

&lt;h6 id=&quot;初始化项目&quot;&gt;&lt;a href=&quot;#初始化项目&quot; class=&quot;headerlink&quot; title=&quot;初始化项目&quot;&gt;&lt;/a&gt;初始化项目&lt;/h6&gt;&lt;pre&gt;
hexo init xxx.github.io
&lt;/pre&gt;



&lt;h6 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h6&gt;&lt;pre&gt;
cd xxx.github.io
npm install
&lt;/pre&gt;

&lt;h6 id=&quot;安装hexo管理插件，编辑发布blog&quot;&gt;&lt;a href=&quot;#安装hexo管理插件，编辑发布blog&quot; class=&quot;headerlink&quot; title=&quot;安装hexo管理插件，编辑发布blog&quot;&gt;&lt;/a&gt;安装hexo管理插件，编辑发布blog&lt;/h6&gt;&lt;pre&gt;
npm install hexo-admin --save
&lt;/pre&gt;


&lt;h6 id=&quot;更换主题&quot;&gt;&lt;a href=&quot;#更换主题&quot; class=&quot;headerlink&quot; title=&quot;更换主题&quot;&gt;&lt;/a&gt;更换主题&lt;/h6&gt;&lt;pre&gt;
git clone https://github.com/iissnan/hexo-theme-next themes/next
&lt;/pre&gt;

&lt;h6 id=&quot;安装git部署插件，发布项目&quot;&gt;&lt;a href=&quot;#安装git部署插件，发布项目&quot; class=&quot;headerlink&quot; title=&quot;安装git部署插件，发布项目&quot;&gt;&lt;/a&gt;安装git部署插件，发布项目&lt;/h6&gt;&lt;pre&gt;
npm install hexo-deployer-git --save
&lt;/pre&gt;
&lt;br&gt;修改&lt;font color=&quot;red&quot;&gt;_config.yml&lt;/font&gt;
&lt;pre&gt;
deploy:
type: git
repository: https://github.com/xx/xx.github.io.git
branch: master
&lt;/pre&gt;

&lt;pre&gt;
hexo deploy #发布到github上
&lt;/pre&gt;
###### 在blog中添加RSS订阅需要安装hexo-generator-feed
&lt;pre&gt;npm install hexo-generator-feed --save&lt;/pre&gt;

&lt;!-- more --&gt; 
&lt;p&gt;安装完hexo-generator-feed后，在配置文件&lt;font color=&quot;red&quot;&gt;_config.yml&lt;/font&gt;中添加如下配置&lt;/p&gt;
&lt;pre&gt; plugin:
- hexo-generator-feed
feed:
type: atom
path: atom.xml
limit: 20
&lt;/pre&gt; 

&lt;p&gt;添加之后，运行&lt;font color=&quot;red&quot;&gt;hexo g&lt;/font&gt;,就会在页面上生成RSS图标。&lt;/p&gt;
&lt;h6 id=&quot;评论系统&quot;&gt;&lt;a href=&quot;#评论系统&quot; class=&quot;headerlink&quot; title=&quot;评论系统&quot;&gt;&lt;/a&gt;评论系统&lt;/h6&gt;&lt;p&gt;添加&lt;a href=&quot;http://duoshuo.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;多说&lt;/a&gt;评论&lt;/p&gt;
&lt;ol&gt;&lt;br&gt;&lt;li&gt;登录多说，首页中选择”我要安装”&lt;/li&gt;&lt;br&gt;&lt;li&gt;创建站点，填写表单。多说域名&lt;/li&gt;&lt;br&gt;&lt;li&gt;在&lt;font color=&quot;red&quot;&gt;_config.yml&lt;/font&gt;中新增&lt;br&gt;&lt;code&gt;duoshuo_shortname&lt;/code&gt;&lt;br&gt;字段，值为多说域名中所填的内容。&lt;br&gt;修改&lt;br&gt;&lt;pre&gt;&lt;br&gt;duoshuo_info:&lt;br&gt;  ua_enable: true&lt;br&gt;  admin_enable: false&lt;br&gt;  user_id: xxx&lt;br&gt;  admin_nickname: author&lt;br&gt;duoshuo_hotartical: true #开启热评文章&lt;br&gt;&lt;/pre&gt;&lt;br&gt;user_id: xxx中的 xxx 为自己的id&lt;br&gt;&lt;/li&gt;&lt;br&gt;&lt;/ol&gt;

&lt;h6 id=&quot;数据统计与分析&quot;&gt;&lt;a href=&quot;#数据统计与分析&quot; class=&quot;headerlink&quot; title=&quot;数据统计与分析&quot;&gt;&lt;/a&gt;数据统计与分析&lt;/h6&gt;&lt;p&gt;数据统计可以使用百度统计、Google分析、腾讯分析和不蒜子统计等&lt;br&gt;本blog中使用不蒜子统计。&lt;br&gt;修改&lt;font color=&quot;red&quot;&gt;_config.yml&lt;/font&gt;&lt;/p&gt;
&lt;pre&gt;
busuanzi_count:
  enable: true
  site_uv: true
  site_uv_header: 访客数
  site_uv_footer: 人数
  site_pv: true
  site_pv_header: 访问量
  site_pv_footer: 次
  page_pv: true
  page_pv_header: 阅读次数
  page_pv_footer: 次
&lt;/pre&gt;

&lt;h6 id=&quot;内容分享&quot;&gt;&lt;a href=&quot;#内容分享&quot; class=&quot;headerlink&quot; title=&quot;内容分享&quot;&gt;&lt;/a&gt;内容分享&lt;/h6&gt;&lt;p&gt;next中有百度分享、多说分享、JiaThis、AddThis等，&lt;br&gt;本blog中使用的为github中开源项目&lt;a href=&quot;https://github.com/overtrue/share.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;share.js&lt;/a&gt;。&lt;/p&gt;
&lt;h6 id=&quot;hexo主题配置&quot;&gt;&lt;a href=&quot;#hexo主题配置&quot; class=&quot;headerlink&quot; title=&quot;hexo主题配置&quot;&gt;&lt;/a&gt;hexo主题配置&lt;/h6&gt;&lt;p&gt;具体内容可以去&lt;a href=&quot;http://theme-next.iissnan.com/theme-settings.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NexT主题配置&lt;/a&gt;上看，&lt;br&gt;第三方配置可参考&lt;a href=&quot;http://theme-next.iissnan.com/third-party-services.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NexT第三方配置&lt;/a&gt;。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;hexo博客搭建需要准备nodejs,以及git&lt;/p&gt;
&lt;h6 id=&quot;首先在github上创建一个-xxx-github-io的respsitory&quot;&gt;&lt;a href=&quot;#首先在github上创建一个-xxx-github-io的respsitory&quot; class=&quot;headerlink&quot; title=&quot;首先在github上创建一个 xxx.github.io的respsitory&quot;&gt;&lt;/a&gt;首先在github上创建一个 xxx.github.io的respsitory&lt;/h6&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://fzzf.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://fzzf.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://fzzf.github.io/2016/05/26/hello-world/"/>
    <id>http://fzzf.github.io/2016/05/26/hello-world/</id>
    <published>2016-05-26T11:10:00.000Z</published>
    <updated>2016-05-27T02:34:50.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt; 
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://fzzf.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://fzzf.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
